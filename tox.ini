[tox]
envlist = {cuda110-,}py37,docker-cuda110-{cputest-,}py37
requires = tox-conda

[testenv]
description = 
    !cuda110: Installs a conda environment with CPU only support
    cuda110: Installs a conda environment with CUDA 11.0
install_command=python -m pip install -f https://download.openmmlab.com/mmcv/dist/cu110/torch1.7.0/index.html {opts} {packages}
deps =
    pytest
    flake8
    mypy
    -r{toxinidir}/requirements.txt
conda_deps =
    pytorch==1.7.1
    torchvision==0.8.2
    cuda110: cudatoolkit=11.0
conda_channels =
    pytorch
extras =
    full
    test
passenv =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    MLMODULE_BUILD_VERSION
commands =
    flake8
    pytest []

[testenv:docker-cuda110-{cputest-,}py37]
description = Environment to test MLModule on the lsirepfl/pytorch image
deps =
    build
conda_deps =
conda_channels =
extras =
setenv =
    cuda110-py37: BASE_IMAGE = lsirepfl/mlmodulekit:1
    MLMODULE_BUILD_VERSION = {env:MLMODULE_BUILD_VERSION:0.0.dev0}
    cputest: CPU_ONLY_TESTS = y
allowlist_externals =
    docker
commands =
    docker build \
        --pull \
		--build-arg MLMODULE_BUILD_VERSION={env:MLMODULE_BUILD_VERSION} \
		--build-arg BASE_IMAGE={env:BASE_IMAGE} \
		--build-arg DISTDIR=.tox/dist \
		-f tests/Dockerfile.test \
		-t test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION} .
    docker run --rm \
		-e AWS_ACCESS_KEY_ID={env:AWS_ACCESS_KEY_ID} \
		-e AWS_SECRET_ACCESS_KEY={env:AWS_SECRET_ACCESS_KEY} \
		-e CPU_ONLY_TESTS={env:CPU_ONLY_TESTS:n} \
        -v {toxworkdir}/.pytest:/app/.pytest \
		test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION} \
		conda run -n app --no-capture-output pytest []
commands_post =
    docker rmi test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION}
