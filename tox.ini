[tox]
envlist = {cuda111-,}{py37,py39},docker{-cputest,}
requires = tox-conda

[testenv]
description =
    !cuda111: Installs a conda environment with CPU only support
    cuda111: Installs a conda environment with CUDA 11.1
deps =
    black
    darker
    pytest
    flake8
    mypy
    -r{toxinidir}/requirements.txt
conda_deps =
    pytorch==1.9.1
    torchvision==0.10.1
    cuda111: cudatoolkit=11.1
    libjpeg-turbo
conda_channels =
    conda-forge
    pytorch
    nvidia
extras =
    full
    test
passenv =
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    MLMODULE_BUILD_VERSION
commands =
    flake8
    pytest []

[testenv:docker{-cputest,}]
envdir = {toxworkdir}/docker
description = Environment to test MLModule on the lsirepfl/pytorch image
deps =
    build
conda_deps =
conda_channels =
extras =
setenv =
    BASE_IMAGE = lsirepfl/mlmodulekit:3
    MLMODULE_BUILD_VERSION = {env:MLMODULE_BUILD_VERSION:0.0.dev0}
    cputest: CPU_ONLY_TESTS = y
allowlist_externals =
    docker
commands =
    docker build \
		--build-arg MLMODULE_BUILD_VERSION={env:MLMODULE_BUILD_VERSION} \
		--build-arg BASE_IMAGE={env:BASE_IMAGE} \
		--build-arg DISTDIR=.tox/dist \
		-f tests/Dockerfile.test \
		-t test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION} .
    docker run --rm \
		-e AWS_ACCESS_KEY_ID={env:AWS_ACCESS_KEY_ID} \
		-e AWS_SECRET_ACCESS_KEY={env:AWS_SECRET_ACCESS_KEY} \
		-e CPU_ONLY_TESTS={env:CPU_ONLY_TESTS:n} \
        -v {toxworkdir}/.pytest:/app/.pytest \
		test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION} \
		conda run -n app --no-capture-output pytest []
commands_post =
    docker rmi test-mlmodule/{env:BASE_IMAGE}-{env:MLMODULE_BUILD_VERSION}
